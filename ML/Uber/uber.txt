import numpy as np
import pandas as pd

data = pd.read_csv("uber.csv")

print(data.shape)
print(data.columns)

data.head()

# returns dataframe containing only
#features (independent variables) of dataset
#select all rows, and coloumn except last onr
data_x = data.iloc[:,0:-1].values

# select al rows bu tonly last col, i.e target variable
data_y = data.iloc[:,-1].values
print(data_x)
print(data_y)

data.info()

#converting col into datetime format
data['pickup_datetime'] = pd.to_datetime(data['pickup_datetime'])

data.head()
data.describe()
data.isnull().sum()

data.dropna(inplace=True) # dropping the null values
print(data.isnull().sum())

import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline

sns.distplot(data['fare_amount'])
sns.distplot(data['pickup_latitude'])
sns.distplot(data['pickup_longitude'])
sns.distplot(data['dropoff_latitude'])
sns.distplot(data['dropoff_longitude'])

Here we can see minim value is going to be less than even -3000 whichis not correct value and also on positive side also going more than 2000

print("dropoff_off latitude min value", data['dropoff_latitude'].min())
print("dropoff_off latitude max value", data['dropoff_latitude'].max())
print("dropoff_off longitude min value", data['dropoff_longitude'].min())
print("dropoff_off longitude max value", data['dropoff_longitude'].max())

print("pickup_off latitude min value", data['pickup_latitude'].min())
print("pickup_off latitude max value", data['pickup_latitude'].max())
print("pickup_off longitude min value", data['pickup_longitude'].min())
print("pickup_off longitude max value", data['pickup_longitude'].max())

# set same range in train set so that noisy data is removed
min_longitude = -74.263242
min_latitude = 40.573143
max_longitude = -72.986532
max_latitude = 41.709555

# drop all the values which are not cmoing in above range, as those are noisy data

tempdf=data[(data["dropoff_latitude"]<min_latitude) | (data["pickup_latitude"]<min_latitude) | (data["dropoff_longitude"]<min_longitude) | (data["pickup_longitude"]<min_longitude) | (data["dropoff_latitude"]>max_latitude) | (data["pickup_latitude"]>max_latitude) | (data["dropoff_longitude"]>max_longitude) | (data["pickup_longitude"]>max_longitude) ]
print("before droppping", data.shape)
data.drop(tempdf.index, inplace=True)
print("after dropping", data.shape)

On different day and time there would be different price like during eveing price would be more compare to afternoon, during christmas price would be different and similarly on weekends price would be different compare to week days. so lets create some extra features which will take care of all these things

# remove all rows whose fare is negative
print("before droppping", data.shape)
train_df = data[data['fare_amount']>0]
print('after_droppping', data.shape)

import calendar
data['day']=data['pickup_datetime'].apply(lambda x:x.day) #extracts day component
data['hour']=data['pickup_datetime'].apply(lambda x:x.hour) #gives hour part of the datetime
data['weekday']=data['pickup_datetime'].apply(lambda x:calendar.day_name[x.weekday()]) #returns day of the week as an integer(0-6)
data['month']=data['pickup_datetime'].apply(lambda x:x.month) # gives month component
data['year']=data['pickup_datetime'].apply(lambda x:x.year) # gives year component

data.head()
# converting week day into numercial form
data.weekday = data.weekday.map({'Sunday':0,'Monday': 1, 'Tuesday': 2,'Wednesday': 3,'Thursday': 4,'Friday': 5,'Saturday': 6})
data.info()
# we will keep only those rows where number of passengers are less than 8

data = data[data['passenger_count']<=8]
data.info()

#here key column and pickup_datetime columns are not needed as we have already created variables extracted from it

data.drop(["key","pickup_datetime"], axis=1, inplace=True)

#splitting into train and validation test set
from sklearn.model_selection import train_test_split

x = data.drop('fare_amount', axis = 1)

y = data['fare_amount']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 101)

x_train.head()

x_test.head()

x_train.shape

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(x_train, y_train)

LinearRegression(copy_X=True, fit_intercept=True, n_jobs=1)

predictedvalues = model.predict(x_test)

#lets calculate rmse for linear Regression model
from sklearn.metrics import mean_squared_error
lrmodelrmse = np.sqrt(mean_squared_error(predictedvalues, y_test))
print("RMSE value for Linear regression is", lrmodelrmse)

#Lets see with Random Forest and calculate its rmse
from sklearn.ensemble import RandomForestRegressor
# rfrmodel = RandomForestRegressor(n_estimators=100, random_state=101)
rfrmodel = RandomForestRegressor(n_estimators=50, random_state=101)

rfrmodel.fit(x_train,y_train)
rfrmodel_pred= rfrmodel.predict(x_test)
rfrmodel_rmse=np.sqrt(mean_squared_error(rfrmodel_pred, y_test))
print("RMSE value for Random forest regression is ",rfrmodel_rmse)